name: BuildTest
run-name: OCL-MatMul ${{ inputs.student_url }} by @${{ github.actor }}

on:
  workflow_dispatch:   
    inputs:
      r1:
        description: 'realization = 1 (без использования локальной памяти)'
        type: boolean
        default: true        
      r2:
        description: 'realization = 2 (с использованием локальной памяти и обработкой одного элемента в каждом потоке)'
        type: boolean
        default: false           
      r3:
        description: 'realization = 3 (с использованием локальной памяти и векторной обработкой нескольких элементов в каждом потоке)'
        type: boolean
        default: false        
      gpu_server:
        description: 'Запуск на сервере с профайлером'
        type: boolean
        default: true
  
env:
  SESSION_MANE: "matmul"
  RCPROF_FOLDER: "rcprof"
  INPUT: "in"
  OUTPUT: "out"
  REF: "ref"
  BUILDLOG: "build.log"
  OUTLOG: "result.log"
  COUNT_REALIZATIONS: 3
  EXE: __test.exe

defaults:
  run:
    shell: pwsh

jobs:                
  buildtest:
    if: (github.actor == 'RonoveRaum') || (github.run_number <= 100)
    timeout-minutes: 10
    strategy:
      max-parallel: 1
      fail-fast: true
      matrix:
        os: [windows-latest, self-hosted] # 
      
    runs-on: ${{ matrix.os }}
    name: OCL-MatMul on ${{ matrix.os }} ${{ inputs.student_url }} by @${{ github.actor }}
    env:
      GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
        
    steps:
      - uses: git9527/clean-up-action@v1
      
      - name: config
        id: config
        if: matrix.os != 'windows-latest'
        run: |        
          "::group::git config"
          git config user.name github-actions
          git config user.email github-actions@github.com  
          "::endgroup::"
        
          git config --global --add safe.directory ${{github.workspace}}
        
      - uses: actions/checkout@v4
        with:
          token: ${{secrets.GS_TOKEN}}
      
      - name: init
        id: init
        if: matrix.os == 'windows-latest'
        run: | 
          #systeminfo          
          #Get-WmiObject -Class Win32_Processor -ComputerName. | Select-Object -Property [a-z]*
                
          "::group::Remove old test_data"
          Remove-Item 'test_data/*' -Recurse -Include out_*
          "::endgroup::"
          
          "::group::reg"
          $registryPath = "HKLM:\SOFTWARE\WOW6432Node\Khronos\OpenCL\Vendors"  
          $Name = "${{ github.workspace }}\\.github\\opencl_for_tests\\amdocl.dll"
          $value = "00000000"

          IF(!(Test-Path $registryPath)) { New-Item -Path $registryPath -Force | Out-Null }
          New-ItemProperty -Path $registryPath -Name $name -Value $value -PropertyType DWORD -Force | Out-Null
          echo "::endgroup::"
                      
          "::group::PATH"  
          "${{ github.workspace }}\\.github\\opencl_for_tests" >> $env:GITHUB_PATH
          echo $env:PATH
          echo $env:GITHUB_PATH
          "::endgroup::"

          choco upgrade llvm
                 
      - name: build
        id: build
        if: matrix.os == 'windows-latest' || inputs.gpu_server
        run: |
          #Set-PSDebug -Trace 1
          $ErrorActionPreference = 'SilentlyContinue'
          $build_exit_code = 0

          $cpp = Get-ChildItem -Force -File -Name main.cpp
          $c = Get-ChildItem -Force -File -Name main.c
          "::group::debug info"
          echo "cpp=$cpp $($cpp.GetType()) $($cpp.GetType() -eq [String])"
          echo "c=$cpp $($c.GetType()) $($c.GetType() -eq [String])"
          "::endgroup::"

          $cpp_build = $false
          try { if ($cpp.GetType() -eq [String]) { $cpp_build = $true } } catch { $cpp_build = $false }
          
          try {
            if (-not $cpp_build)
            {
              pwsh -Command { clang -fopenmp -m32 -std=c2x -DCL_TARGET_OPENCL_VERSION=120 -D_CRT_SECURE_NO_WARNINGS -D_USE_MATH_DEFINES -O2 -Wall -Wno-gnu-anonymous-struct -Wvla -I".github/opencl_for_tests/include" -I"include" -L".github/opencl_for_tests/lib" $((Get-ChildItem -Path . -Include @('*.c') -Recurse -ErrorAction SilentlyContinue -Force).FullName) -o ${{env.EXE}} -lOpenCL *>&1 > ${{env.BUILDLOG}} }
            }
            else
            {
              pwsh -Command { clang -fopenmp -m32 -std=c++20 -DCL_TARGET_OPENCL_VERSION=120 -D_CRT_SECURE_NO_WARNINGS -D_USE_MATH_DEFINES -O2 -Wall -Wno-gnu-anonymous-struct -Wvla -I".github/opencl_for_tests/include" -I"include" -L".github/opencl_for_tests/lib" $((Get-ChildItem -Path . -Include @('*.cpp') -Recurse -ErrorAction SilentlyContinue -Force).FullName) -o ${{env.EXE}} -lOpenCL *>&1 > ${{env.BUILDLOG}} }
            }
             
          } catch {
            Write-Output "❌ build failed!"
          } finally {
            $build_exit_code = $LastExitCode
            $blog="$(Get-Content ${{env.BUILDLOG}} -Raw)"
            echo "# Build" >> $env:GITHUB_STEP_SUMMARY
            echo "LastExitCode: $($build_exit_code)" >> $env:GITHUB_STEP_SUMMARY  
            echo "<details><summary>Build log (can be empty)</summary>`n" >> $env:GITHUB_STEP_SUMMARY  
            echo '```' >> $env:GITHUB_STEP_SUMMARY
            $blog >> $env:GITHUB_STEP_SUMMARY
            echo '```' >> $env:GITHUB_STEP_SUMMARY
            echo "`n</details>`n`n" >> $env:GITHUB_STEP_SUMMARY  
            
            "::group::Build log"  
            echo $blog
            "::endgroup::"
          }
          exit($build_exit_code + -not (& Test-Path -Path ${{env.EXE}} -PathType Leaf))
                         
      - name: tests
        id: tests
        if: matrix.os == 'windows-latest' || inputs.gpu_server
        run: |
          #Set-PSDebug -Trace 1
          if ('${{matrix.os}}' -eq 'windows-latest') { Copy-Item -Path ".github/opencl_for_tests/OpenCL.dll" -Destination "." }
          
          $test_exit_code = 0
          
          foreach ($realization in 1..${{env.COUNT_REALIZATIONS}})
          {
            $r1 = [bool]::Parse($(try{$${{ inputs.r1 }}}catch{$true}))
            $r2 = [bool]::Parse($(try{$${{ inputs.r2 }}}catch{$true}))
            $r3 = [bool]::Parse($(try{$${{ inputs.r3 }}}catch{$true}))
            
            if ( (($realization -eq 1) -and $r1) -or (($realization -eq 2) -and $r2) -or (($realization -eq 3) -and $r3))
            {
              echo "realization=$realization, r1=$r1 r2=$r2 r3=$r3"
              
              $i = if ('${{matrix.os}}' -eq 'windows-latest') { 2 } else { 0 }
                        
              echo "# Test $i (realization $realization)" >> $env:GITHUB_STEP_SUMMARY  
              "::group::Output log test_$($i)_$($realization)"

                try 
                {
                  $ErrorActionPreference = 'SilentlyContinue'

                  $infile = "test_data/${{env.INPUT}}$i.txt"
                  $ti = "https://github.com/"+"${{github.repository}}"+"/tree/main/$($infile)"
                  
                  $outfile = "test_data/${{env.OUTPUT}}_$i.txt"
                  $to = "https://github.com/"+"${{github.repository}}"+"/tree/main/$($outfile)"
                  
                  $reffile = "test_data/${{env.REF}}$i.txt"
                  $tr = "https://github.com/"+"${{github.repository}}"+"/tree/main/$($reffile)"

                  $cmd = " --input $infile --output $outfile --realization $realization --device-type all --device-index 0"
                  echo 'run:' >> $env:GITHUB_STEP_SUMMARY
                    echo '```' >> $env:GITHUB_STEP_SUMMARY
                    echo $cmd >> $env:GITHUB_STEP_SUMMARY
                    echo '```' >> $env:GITHUB_STEP_SUMMARY
                  $processOptions = @{
                    FilePath = "${{env.EXE}}"
                    ArgumentList = $cmd
                    RedirectStandardOutput = "stdout.log"
                    RedirectStandardError = "stderr.log"
                    NoNewWindow = $true
                    PassThru = $true
                  }
                  $p = Start-Process @processOptions
                  Wait-Process -InputObject $p       
                  $exit_code_p = [int]$p.ExitCode

                } 
                catch 
                {
                  echo "input: [$($infile)]($ti)" >> $env:GITHUB_STEP_SUMMARY

                  echo "❌ [ERROR] Program crashed" >> $env:GITHUB_STEP_SUMMARY                
                  $test_exit_code += 1
                  echo "[debug] error codes: $test_exit_code" >> $env:GITHUB_STEP_SUMMARY 
                  continue
                }    

                $stderr = (Get-Content "stderr.log") 
                $stdout = (Get-Content "stdout.log")

                echo "input: [$($infile)]($ti)" >> $env:GITHUB_STEP_SUMMARY
                echo "ref: [$($reffile)]($tr)" >> $env:GITHUB_STEP_SUMMARY
                echo "exit code: $exit_code_p" >> $env:GITHUB_STEP_SUMMARY           

                echo "[stderr]:" >> $env:GITHUB_STEP_SUMMARY
                echo '```' >> $env:GITHUB_STEP_SUMMARY
                echo "$($stderr)"  >> $env:GITHUB_STEP_SUMMARY  
                echo '```' >> $env:GITHUB_STEP_SUMMARY
                echo "[stderr]: $stderr"
                      
                echo "[stdout]:" >> $env:GITHUB_STEP_SUMMARY
                echo '```' >> $env:GITHUB_STEP_SUMMARY
                $stdout  >> $env:GITHUB_STEP_SUMMARY  
                echo '```' >> $env:GITHUB_STEP_SUMMARY
                echo "[stdout]: $stdout"
                
                echo "Result:" >> $env:GITHUB_STEP_SUMMARY  
                                
                if ($exit_code_p -ne 0)
                {               
                  echo '```' >> $env:GITHUB_STEP_SUMMARY
                  echo "❌ [ERROR] Program completed with code $exit_code_p (!= 0)" >> $env:GITHUB_STEP_SUMMARY 
                  echo '```' >> $env:GITHUB_STEP_SUMMARY               
                  $test_exit_code += 1
                }          
                elseif ((& Test-Path -Path stderr.log -PathType Leaf) -and ((Get-ChildItem -Path stderr.log).Length -ne 0))
                {
                  echo '```' >> $env:GITHUB_STEP_SUMMARY
                  echo "❌ [ERROR] Stderr is not empty [program completed with code $exit_code_p]" >> $env:GITHUB_STEP_SUMMARY 
                  echo '```' >> $env:GITHUB_STEP_SUMMARY              
                  $test_exit_code += 1
                } 
                elseif (-not (& Test-Path -Path $outfile -PathType Leaf))
                {
                  echo '```' >> $env:GITHUB_STEP_SUMMARY
                  echo "❌ [ERROR] Output file does not exist [program completed with code $exit_code_p]" >> $env:GITHUB_STEP_SUMMARY 
                  echo '```' >> $env:GITHUB_STEP_SUMMARY              
                  $test_exit_code += 1
                }
                elseif ((Get-ChildItem -Path $outfile).Length -eq 0) 
                {
                  echo '```' >> $env:GITHUB_STEP_SUMMARY
                  echo "❌ [ERROR] Output file is empty [program completed with code $exit_code_p]" >> $env:GITHUB_STEP_SUMMARY  
                  echo '```' >> $env:GITHUB_STEP_SUMMARY             
                  $test_exit_code += 1
                }
                elseif ((& Test-Path -Path stdout.log -PathType Leaf) -and ((Get-ChildItem -Path stdout.log).Length -eq 0))
                {
                  echo '```' >> $env:GITHUB_STEP_SUMMARY
                  echo "❌ [ERROR] Stdout empty [program completed with code $exit_code_p]" >> $env:GITHUB_STEP_SUMMARY    
                  echo '```' >> $env:GITHUB_STEP_SUMMARY            
                  $test_exit_code += 1
                }
                else
                {
                  $ref_split = $(Get-Content $reffile).split([System.Environment]::NewLine, [System.StringSplitOptions]::RemoveEmptyEntries) | Sort-Object
                  $out_split = $(Get-Content $outfile).split([System.Environment]::NewLine, [System.StringSplitOptions]::RemoveEmptyEntries) | Sort-Object

                  $res_test = $true
                  try
                  {
                    for($k=0; $k -lt $ref_split.count; $k++)
                    {
                        $ref_num = $ref_split[$k].Trim() -split ' '
                        $out_num = $out_split[$k].Trim() -split ' '
                        
                        #echo "ref_num=*$($ref_num)*$($ref_num.Length)*"
                        #echo "out_num=*$($out_num)*$($out_num.Length)*"

                        if ($ref_num.Length -ne $out_num.Length)
                        {
                            $res_test = $false
                            echo "lens*$($out_num.Length)!=$($ref_num.Length)*"
                            break
                        }
                        for($p = 0; $p -lt $ref_num.Length; $p++)
                        {
                            $ref_n = [System.Double]$ref_num[$p]
                            $out_n = [System.Double]$out_num[$p]
                            $delta = [Math]::Abs(($ref_n - $out_n)/($ref_n+1e-9))
                            $equals = ($delta -lt 1e-5)
                            
                            if ($res_test -and (-not $equals))
                            {
                              echo '```' >> $env:GITHUB_STEP_SUMMARY
                              echo "expected: [$($k)][$($p)] = $($ref_n)" >> $env:GITHUB_STEP_SUMMARY 
                              echo "got:      [$($k)][$($p)] = $($out_n)" >> $env:GITHUB_STEP_SUMMARY 
                              echo '```' >> $env:GITHUB_STEP_SUMMARY
                            }
                            $res_test = $res_test -and $equals
                            
                            $res_test = $res_test -and $equals
                        }
                    }
                  }
                  catch
                  {                  
                    $res_test = $false
                  }
                  
                  if ($res_test) { 
                    echo '```' >> $env:GITHUB_STEP_SUMMARY
                    "✅ PASSED" >> $env:GITHUB_STEP_SUMMARY
                    echo '```' >> $env:GITHUB_STEP_SUMMARY      
                  } else {
                    echo '```' >> $env:GITHUB_STEP_SUMMARY
                    echo "❌ FAILED [output != expected]" >> $env:GITHUB_STEP_SUMMARY 
                    echo '```' >> $env:GITHUB_STEP_SUMMARY               
                    $test_exit_code += 1
                  } 
                  if (Test-Path $outfile) { git add $outfile }
                  echo "output: [$($outfile)]($to)" >> $env:GITHUB_STEP_SUMMARY   
                }
                echo "[debug] error codes: $test_exit_code" >> $env:GITHUB_STEP_SUMMARY   
              
              "::endgroup::"
            }
          }
          
          "::group::dirs"
          dir -Recurse -Path ..
          "::endgroup::"
          
          "::group::git config"
          git config user.name github-actions
          git config user.email github-actions@github.com  
          "::endgroup::"
          "::group::upload results"
          git commit -m "Automatically upload workflow test results from ${{matrix.os}}"
          git push --force origin HEAD:main    
          "::endgroup::"
        
          exit($test_exit_code)
                    
      - name: profiling
        id: profiling
        if: matrix.os != 'windows-latest' && inputs.gpu_server
        run: |             
          #Set-PSDebug -Trace 1
          $idx = 0

          "${{vars.RCPROF_ROOT_FOLDER}}\rcprof.exe"
          echo "--workingdirectory .`n"
          
          foreach ($realization in 1..${{env.COUNT_REALIZATIONS}})
          {          
            $r1 = [bool]::Parse($(try{$${{ inputs.r1 }}}catch{$true}))
            $r2 = [bool]::Parse($(try{$${{ inputs.r2 }}}catch{$true}))
            $r3 = [bool]::Parse($(try{$${{ inputs.r3 }}}catch{$true}))

            if ( (($realization -eq 1) -and $r1) -or (($realization -eq 2) -and $r2) -or (($realization -eq 3) -and $r3))
            {
              echo "# Profiling $idx (realization $realization)" >> $env:GITHUB_STEP_SUMMARY  
              
              $rcprof_work_folder = "./${{env.RCPROF_FOLDER}}_$($realization)"              
              #git lfs track "$($rcprof_work_folder)/*"
              if (-not (Test-Path $rcprof_work_folder)) { mkdir $rcprof_work_folder }
          
              echo "realization=$realization, r1=$r1 r2=$r2 r3=$r3"
              $infile = "test_data/in$idx.txt"
              $outfile = "test_data/out_$idx.txt"
              echo 'run:' >> $env:GITHUB_STEP_SUMMARY
                echo '```' >> $env:GITHUB_STEP_SUMMARY
                echo "${{vars.RCPROF_ROOT_FOLDER}}\rcprof.exe --outputfile `"$($rcprof_work_folder)/rcprof_$($realization).csv`" --sessionname `"${{env.SESSION_MANE}}_$($realization)_prof`" --perfcounter --occupancy --workingdirectory `".`" `"${{env.EXE}}`" `"--input`" `"$infile`" `"--output`" `"$outfile`" `"--realization`" `"$realization`" `"--device-type`" `"all`" `"--device-index`" `"0`"" >> $env:GITHUB_STEP_SUMMARY
                echo '```' >> $env:GITHUB_STEP_SUMMARY
              & "${{vars.RCPROF_ROOT_FOLDER}}\rcprof.exe" --outputfile "$($rcprof_work_folder)/rcprof_$($realization).csv" --sessionname "${{env.SESSION_MANE}}_$($realization)_prof" --perfcounter --occupancy --workingdirectory "." "${{env.EXE}}" "--input" "$infile" "--output" "$outfile" "--realization" "$realization" "--device-type" "all" "--device-index" "0" >> "out_$($realization).log"

              $outlog = (Get-Content "out_$($realization).log")
                echo "[out.log]:" >> $env:GITHUB_STEP_SUMMARY
                echo '```' >> $env:GITHUB_STEP_SUMMARY
                $outlog  >> $env:GITHUB_STEP_SUMMARY
                echo '```' >> $env:GITHUB_STEP_SUMMARY
                
              "::group::upload results"
              if (Test-Path $rcprof_work_folder) { git add "$($rcprof_work_folder)/*" }
              git commit -m "Automatically upload workflow perf results from ${{matrix.os}}"
              git push --force origin HEAD:main    
              "::endgroup::"
            }
          } 
          
      - name: cleanup
        id: cleanup
        run: Remove-Item -Recurse -Force -Path ${{github.workspace}} -ErrorAction SilentlyContinue
