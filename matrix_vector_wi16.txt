#define TILE_SIZE 16
#define THREAD_WORK 16
#define SIZE_VEC (TILE_SIZE / THREAD_WORK + 1)

kernel void add(global float *a, global float *b, global float *c,
                                      unsigned int M, unsigned int N, unsigned int K)
{
    int i = get_global_id(0);
    int j = get_global_id(1);
    int local_i = get_local_id(0);
    int local_j = get_local_id(1);
    local union {
        float mat[TILE_SIZE][TILE_SIZE + THREAD_WORK];
        float16 vec[TILE_SIZE][SIZE_VEC];
    } tileA;
    local float16 tileB[TILE_SIZE][SIZE_VEC]; 
    float16 sum = 0.0;
    for (int tileK = 0; tileK * TILE_SIZE < K; ++tileK) {
        tileA.vec[local_j][local_i] = vload16(0, &a[j * K + tileK * TILE_SIZE + local_i * THREAD_WORK]);
        tileB[local_j][local_i] = vload16(0, &b[(tileK * TILE_SIZE + local_j) * N + i * THREAD_WORK]);
        barrier(CLK_LOCAL_MEM_FENCE);
        for (int k = 0; k < TILE_SIZE; ++k) {
            sum += tileA.mat[local_j][k] * tileB[k][local_i];
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    vstore16(sum, 0, &c[j * N + i * THREAD_WORK]);
}